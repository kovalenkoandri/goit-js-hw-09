{"mappings":"gfAAA,IAAAA,EAAAC,EAAA,SACMC,EAAOC,SAASC,cAAc,SACtBD,SAASC,cAAc,wBAWrCF,EAAKG,iBAAiB,UAAU,SAAAC,GAC9BA,EAAMC,iBACN,IAAMC,EAAcF,EAAMG,cAAcC,SAASC,MAAMC,MACjDC,EAAaP,EAAMG,cAAcC,SAASI,KAAKF,MAC/CG,EAAeT,EAAMG,cAAcC,SAASM,OAAOJ,MACrDK,EAAQC,OAAOV,GACfM,EAAOI,OAAOL,GACZM,EAAaL,EACbE,EAASE,OAAOH,GAClBK,EAAW,EACfC,QAAQC,IAAI,oBACZ,IAAMC,EAASC,KAAKC,MACpBC,YAAW,WACT,IAAMC,EAAaC,aAAY,WAvBnC,IAAuBC,EAAUlB,EAyBV,KADjBS,GAAY,KAEVN,EAAOG,GAELG,GAAYJ,GACdc,cAAcH,IA7BCE,EA+BHT,EA/BaT,EA+BHM,EA9BrB,IAAIc,SAAQ,SAACC,EAASC,GACLC,KAAKC,SAAW,GAEpCH,EAAQH,EAAUlB,GAElBsB,EAAOJ,EAAUlB,OA0BdyB,MAAK,SAAAC,G,IAAGR,EAAQQ,EAARR,SAAUlB,EAAK0B,EAAL1B,MACjBX,EAAAsC,OAAOC,QAAQ,uBAAwCC,OAAfX,EAAS,QAAYW,OAAN7B,EAAM,UAE9D8B,OAAM,SAAAJ,G,IAAGR,EAAQQ,EAARR,SAAUlB,EAAK0B,EAAL1B,MAClBX,EAAAsC,OAAOI,QAAQ,sBAAqCF,OAAfX,EAAS,QAAYW,OAAN7B,EAAM,UAE9DM,GAASE,EACT,IAAMwB,EAAQnB,KAAKC,MACnBJ,QAAQC,IAAI,6BAA8BqB,EAAQpB,GAAU,OAC3DT,GACG8B,EAASpB,KAAKC,MACpBJ,QAAQC,IAAI,8BAA+BsB,EAASrB,GAAU,OAC7DN,M","sources":["src/js/03-promises.js"],"sourcesContent":["import { Notify } from 'notiflix/build/notiflix-notify-aio';\nconst form = document.querySelector('.form');\nconst input = document.querySelector('input[name=\"amount\"]');\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n    if (shouldResolve) {\n      resolve(position, delay);\n    } else {\n      reject(position, delay);\n    }\n  });\n}\nform.addEventListener('submit', event => {\n  event.preventDefault();\n  const stringDelay = event.currentTarget.elements.delay.value;\n  const stringStep = event.currentTarget.elements.step.value;\n  const stringAmount = event.currentTarget.elements.amount.value;\n  let delay = Number(stringDelay);\n  let step = Number(stringStep);\n  const stepLogged = step;\n  const amount = Number(stringAmount);\n  let position = 0;\n  console.log('start load cache');\n  const before = Date.now();\n  setTimeout(function time() {\n    const intervalId = setInterval(function () {\n      position += 1;\n      if (position === 1) {\n        step = delay;\n      }\n      if (position >= amount) {\n        clearInterval(intervalId);\n      }\n      createPromise(position, delay)\n        .then(({ position, delay }) => {\n          Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n        })\n        .catch(({ position, delay }) => {\n          Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n        });\n      delay += stepLogged;\n      const after = Date.now();\n      console.log('cache load ok executed in', (after - before) / 1000);\n    }, step);\n    const after1 = Date.now();\n    console.log('cache load1 ok executed in', (after1 - before) / 1000);\n  }, delay);\n});\n"],"names":["$h6c0i","parcelRequire","$ce04d3a99e08e73b$var$form","document","querySelector","addEventListener","event","preventDefault","stringDelay","currentTarget","elements","delay","value","stringStep","step","stringAmount","amount","delay1","Number","stepLogged","position1","console","log","before","Date","now","setTimeout","intervalId","setInterval","position","clearInterval","Promise","resolve","reject","Math","random","then","param","Notify","success","concat","catch","failure","after","after1"],"version":3,"file":"03-promises.43183722.js.map"}