{"mappings":"gfAAA,IAAAA,EAAAC,EAAA,SAEA,SAASC,EAAcC,EAAUC,GAC/B,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3B,IAAMC,EAAgBC,KAAKC,SAAW,GACxCC,YAAW,WACHH,EACFF,EAAQ,CAAEH,WAAUC,UAEpBG,EAAO,CAAEJ,WAAUC,YAEtBA,MAVQQ,SAASC,cAAc,SAa/BC,iBAAiB,UAAU,SAAAC,GAC9BA,EAAMC,iBACN,IAAMC,EAAcF,EAAMG,cAAcC,SAASf,MAAMgB,MACjDC,EAAaN,EAAMG,cAAcC,SAASG,KAAKF,MAC/CG,EAAeR,EAAMG,cAAcC,SAASK,OAAOJ,MACrDK,EAAQC,OAAOT,GACfK,EAAOI,OAAOL,GACZG,EAASE,OAAOH,GACtBI,QAAQC,IAAI,oBAEZ,IADA,IAAMC,EAASC,KAAKC,MACXC,EAAW,EAAGA,GAAYR,EAAQQ,GAAY,EACjDA,EAAW,IACbP,GAASH,GAETpB,EAAc8B,EAAUP,GACrBQ,MAAK,SAAAC,G,IAAG/B,EAAQ+B,EAAR/B,SAAUC,EAAK8B,EAAL9B,MACjBJ,EAAAmC,OAAOC,QAAQ,uBAAwCC,OAAflC,EAAS,QAAYkC,OAANjC,EAAM,OAC3D,IAAIkC,EAAQR,KAAKC,MACnBJ,QAAQC,IAAI,6BAA8BU,EAAQT,GAAU,QAE7DU,OAAM,SAAAL,G,IAAG/B,EAAQ+B,EAAR/B,SAAUC,EAAK8B,EAAL9B,MAClBJ,EAAAmC,OAAOK,QAAQ,sBAAqCH,OAAflC,EAAS,QAAYkC,OAANjC,EAAM,OAC1D,IAAMqC,EAASX,KAAKC,MACpBJ,QAAQC,IAAI,8BAA+Ba,EAASZ,GAAU,W","sources":["src/js/03-promises.js"],"sourcesContent":["import { Notify } from 'notiflix/build/notiflix-notify-aio';\nconst form = document.querySelector('.form');\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n  setTimeout(function time() {\n      if (shouldResolve) {\n        resolve({ position, delay });\n    } else {\n        reject({ position, delay });\n    }\n  }, delay);\n  });\n}\nform.addEventListener('submit', event => {\n  event.preventDefault();\n  const stringDelay = event.currentTarget.elements.delay.value;\n  const stringStep = event.currentTarget.elements.step.value;\n  const stringAmount = event.currentTarget.elements.amount.value;\n  let delay = Number(stringDelay);\n  let step = Number(stringStep);\n  const amount = Number(stringAmount);\n  console.log('start load cache');\n  const before = Date.now();\n  for (let position = 1; position <= amount; position += 1) {\n    if (position > 1) {\n      delay += step;\n      } \n      createPromise(position, delay)\n        .then(({ position, delay }) => {\n          Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n          const after = Date.now();\n          console.log('cache load ok executed in', (after - before) / 1000);\n      })\n        .catch(({ position, delay }) => {\n          Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n          const after1 = Date.now();\n          console.log('cache load1 ok executed in', (after1 - before) / 1000);\n        });\n      }\n});\n"],"names":["$h6c0i","parcelRequire","$ce04d3a99e08e73b$var$createPromise","position","delay","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","document","querySelector","addEventListener","event","preventDefault","stringDelay","currentTarget","elements","value","stringStep","step","stringAmount","amount","delay1","Number","console","log","before","Date","now","position1","then","param","Notify","success","concat","after","catch","failure","after1"],"version":3,"file":"03-promises.477a4257.js.map"}