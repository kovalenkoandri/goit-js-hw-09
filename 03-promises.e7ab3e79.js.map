{"mappings":"oeAAA,IAAAA,EAAAC,EAAA,SAEA,SAASC,EAAcC,EAAUC,GAC/B,OAAO,IAAIC,SAAQ,CAACC,EAASC,KAC3B,MAAMC,EAAgBC,KAAKC,SAAW,GACxCC,YAAW,WACHH,EACFF,EAAQ,C,SAAEH,E,MAAUC,IAEpBG,EAAO,C,SAAEJ,E,MAAUC,MAEtBA,MAVQQ,SAASC,cAAc,SAa/BC,iBAAiB,UAAUC,IAC9BA,EAAMC,iBACN,MAAMC,EAAcF,EAAMG,cAAcC,SAASf,MAAMgB,MACjDC,EAAaN,EAAMG,cAAcC,SAASG,KAAKF,MAC/CG,EAAeR,EAAMG,cAAcC,SAASK,OAAOJ,MACzD,IAAIK,EAAQC,OAAOT,GACfK,EAAOI,OAAOL,GAClB,MAAMG,EAASE,OAAOH,GACtBI,QAAQC,IAAI,oBACZ,MAAMC,EAASC,KAAKC,MACpB,IAAK,IAAIC,EAAW,EAAGA,GAAYR,EAAQQ,GAAY,EACjDA,EAAW,IACbP,GAASH,GAETpB,EAAc8B,EAAUP,GACrBQ,MAAK,EAAC9B,SAAEA,EAAQC,MAAEA,MACjBJ,EAAAkC,OAAOC,QAAQ,uBAAqBhC,QAAiBC,OACnD,MAAIgC,EAAQN,KAAKC,MACnBJ,QAAQC,IAAI,6BAA8BQ,EAAQP,GAAU,QAE7DQ,OAAM,EAAClC,SAAEA,EAAQC,MAAEA,MAClBJ,EAAAkC,OAAOI,QAAQ,sBAAoBnC,QAAeC,OAClD,MAAMmC,EAAST,KAAKC,MACpBJ,QAAQC,IAAI,8BAA+BW,EAASV,GAAU","sources":["src/js/03-promises.js"],"sourcesContent":["import { Notify } from 'notiflix/build/notiflix-notify-aio';\nconst form = document.querySelector('.form');\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n  setTimeout(function time() {\n      if (shouldResolve) {\n        resolve({ position, delay });\n    } else {\n        reject({ position, delay });\n    }\n  }, delay);\n  });\n}\nform.addEventListener('submit', event => {\n  event.preventDefault();\n  const stringDelay = event.currentTarget.elements.delay.value;\n  const stringStep = event.currentTarget.elements.step.value;\n  const stringAmount = event.currentTarget.elements.amount.value;\n  let delay = Number(stringDelay);\n  let step = Number(stringStep);\n  const amount = Number(stringAmount);\n  console.log('start load cache');\n  const before = Date.now();\n  for (let position = 1; position <= amount; position += 1) {\n    if (position > 1) {\n      delay += step;\n      } \n      createPromise(position, delay)\n        .then(({ position, delay }) => {\n          Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n          const after = Date.now();\n          console.log('cache load ok executed in', (after - before) / 1000);\n      })\n        .catch(({ position, delay }) => {\n          Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n          const after1 = Date.now();\n          console.log('cache load1 ok executed in', (after1 - before) / 1000);\n        });\n      }\n});\n"],"names":["$iQIUW","parcelRequire","$47d4ff9957288465$var$createPromise","position","delay","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","document","querySelector","addEventListener","event","preventDefault","stringDelay","currentTarget","elements","value","stringStep","step","stringAmount","amount","delay1","Number","console","log","before","Date","now","position1","then","Notify","success","after","catch","failure","after1"],"version":3,"file":"03-promises.e7ab3e79.js.map"}